--2020.05.25.

--DDL

--테이블 생성
--create table 테이블 이름 () <- 괄호 안에 컬럼 정의
--( 컬럼명1 타입(사이즈) , 컬럼명2 타입(사이즈) , ... )

--ddl_test라는 이름의 테이블 생성
--컬럼1 : no 숫자타입 사이즈는 3, 
--컬럼2 : name 가변 문자열 저장 사이즈는 10, 
--컬럼3 : birth 날짜타입 기본값은 현재 날짜와 시간


create table ddl_test (
    no number(3),
    name varchar(10),
    birth date default sysdate
)
;

desc ddl_test;

select * from tab;

select * from ddl_test;

insert into ddl_test (no, name) values (1, 'SCOTT');


--emp 테이블 참조
--사원번호, 사원이름, 급여 3개의 칼럼으로 구성된 emp01 테이블을 생성해봅시다.
desc emp;

create table emp01 (
    empno number(4),
    ename varchar2(10),
    sal number(7, 2)); --7자리에 소숫점 둘째자리까지

select * from tab;
desc emp01;

-- 테이블의 복사 : 서브쿼리 이용 -> as 서브쿼리
-- 스키마 복사, 행 복사, 제약조건의 복사는 되지 않는다.
create table emp02
as
select * from emp;

desc emp02;
select * from emp02;

-- emp 테이블의 empno와 ename 컬럼만 복사해서 새로운 테이블 emp03을 생성한다.
create table emp03
as
select empno, ename from emp;

select * from emp03;
desc emp03;

-- emp 테이블의 10번 부서의 데이터만 복사해서 새로운 테이블
-- emp04 테이블을 생성한다
create table emp04
as
select * from emp
where deptno=10;
desc emp04;
select * from emp04;

--emp 테이블의 스키마 구조만 복사해서 새로운 테이블 emp05를 생성하자
create table emp05
as
select * from emp where 1=0;
select * from emp05;

--테이블에 컬럼 추가
--alter table 테이블이름 add(컬럼정의)
desc emp01;

alter table emp01 
add(job varchar2(10));

--컬럼의 수정
--alter table 테이블이름 modify (수정할 컬럼정의)
--직급(JOB) 칼럼을 최대 30글자까지 저장할 수 있게 변경해 보도록 하자
alter table emp01
modify (job varchar2(30) not null);
desc emp01;

--컬럼의 삭제
--alter table 테이블이름 drop column 컬럼이름
alter table emp01 drop column sal;
desc emp01;

--테이블 객체 삭제 (ddl은 모두 물리적 반영. 자동 커밋. 복구 안되니 주의)
--drop table 테이블이름
drop table emp01;
select * from tab;
desc emp01;

--테이블의 모든 로우를 삭제하는 truncate도 ddl이므로 물리적 반영... 가급적 delete를 사용
select * from emp02;
truncate table emp02;

--테이블 이름의 변경
--RENAME 현재 테이블이름 TO 새로운 테이블이름
rename test to test_emp;
select * from tab;

desc dept;

insert into dept values (10, 'test', 'seoul');

--컬럼의 제약 정의는 컬럼 정의를 하면서 컬럼 옆에 정의
--컬럼의 타입을 모두 정의하고 아래에 제약을 정의하는 방법

--create table emp01(
--   empno number(4) not null
--)

--create table emp01(
--    empno number(4),
--    primary key(empno)
--)

--not null 제약 : 컬럼의 값에 null 값을 허용하지 않는다.
--컬럼 레벨에서만 정의가 가능하다.

--사원 테이블(EMP02)을 사원번호, 사원명, 직급, 부서번호 4개의 칼럼으로 구성하되 
--이번에는 사원번호와 사원명에 NOT NULL 조건을 지정하도록 합시다.
create table emp02(
    empno number(4) not null,
    ename varchar2(10) not null,
    job varchar2(10),
    deptno number(2)
);

desc emp02;

insert into emp02 values (null, null, 'MANAGER', 10); -- empno에 제약 발동
insert into emp02 values (1111, null, 'MANAGER', 10); -- ename에 제약 발동
insert into emp02 values (1111, 'SON', 'MANAGER', 10);
select * from emp02;

drop table emp03;

create table emp03 (
    empno number(4) unique,
    ename varchar2(10) not null,
    job varchar2(10),
    deptno number(2)
);
desc emp03;
insert into emp03 values (1111, 'TEST', 'MANAGER', 10);
insert into emp03 values (1111, 'TEST123', 'MANAGER', 20); -- empno에 UNIQUE 제약발동
insert into emp03 values (null, 'TEST123', 'MANAGER', 20); -- (1)not null 제약은 안걸림 (2)not null 제약 발동
select * from emp03;

create table emp03 (
    empno number(4) unique not null, --unique와 not null 둘 다 제약 걸어주기
    ename varchar2(10) not null,
    job varchar2(10),
    deptno number(2)
);
desc emp03;


--사원번호, 사원명, 직급, 부서번호 4개의 칼럼으로 구성된 EMP04 테이블을 생성하되 
--사원번호에는 유일키로 사원명은 NOT NULL 제약조건을 설정해 봅시다.
drop table emp04;
create table emp04(
    empno number(4) constraint emp04_empno_UK unique constraint emp04_empno_NN not null,
    ename varchar2(10) constraint emp04_ename_NN not null,
    job varchar2(10),
    deptno number(2)
);

desc emp04;
insert into emp04 values (1111, 'TEST', 'MANAGER', 10);
insert into emp04 values (1111, 'TEST123', 'MANAGER', 20); 
insert into emp04 values (null, 'TEST123', 'MANAGER', 20);

--사원번호, 사원명, 직급, 부서번호 4개의 칼럼으로 구성된 테이블을 생성하되
--사원번호에 기본 키 제약 조건을 설정해 봅시다.
drop table emp05;
create table emp05(
    empno number(4) constraint emp05_empno_PK primary key,
    ename varchar2(10) constraint emp05_ename_NN not null,
    job varchar2(10),
    deptno number(2)
);
desc emp05;
insert into emp05 values (1111, 'TEST', 'MANAGER', 10);
insert into emp05 values (1111, 'TEST123', 'MANAGER', 20); 
insert into emp05 values (null, 'TEST123', 'MANAGER', 20);
select * from emp05;

--사원번호, 사원명, 직급, 부서번호 4개의 칼럼으로 구성된 테이블을 생성하되
--사원번호에 기본 키 제약 조건을 설정해 봅시다.
--deptno를 외래키로 제약조건 설정
drop table emp06;
create table emp06(
    empno number(4) constraint emp06_empno_PK primary key,
    ename varchar2(10) constraint emp06_ename_NN not null,
    job varchar2(10),
    deptno number(2) constraint emp06_deptno_FK references dept(deptno)
);
desc emp06;
insert into emp06 values (1111, 'TEST', 'MANAGER', 10);
insert into emp06 values (1111, 'TEST123', 'MANAGER', 20); 
insert into emp06 values (null, 'TEST123', 'MANAGER', 20);
insert into emp06 values (2222, 'TEST123', 'MANAGER', 50); --외래키 참조 제약에 위배
select * from emp06;

--사원번호, 사원명, 직급, 부서번호, 급여, 성별, 생일 7개의 칼럼으로 구성된 테이블을 생성하되 
--기본 키 제약 조건, 외래키 제약 조건은 물론 
--CHECK 제약 조건도 설정해 봅시다.
--DEFAULT 제약 조건으로 BIRTHDAY SYSDATE로 입력되도록 처리
create table emp07(
    empno number(4) constraint emp07_empno_PK primary key,
    ename varchar2(10) constraint emp07_ename_NN not null,
    job varchar2(10) default 'MANAGER',
    deptno number(2) constraint emp07_deptno_FK references dept(deptno), 
    gender char(1) constraint emp07_gender_CK check (gender in ('M', 'F')),
    sal number(7,2) constraint emp07_sal_CK check (sal between 500 and 5000),
    birthday date default sysdate
);

insert into emp07 values (1111, 'TEST', null, 10, 'F', 600, null);
insert into emp07 values (2222, 'TEST', null, 10, 'M', 600, null);
insert into emp07 (empno, ename, deptno, gender, sal)
            values (1113, 'TEST', 10, 'F', 1600);
select * from emp07;


--테이블 레벨에서의 제약 조건 정의
drop table emp02;

create table emp02(
    empno number(4),
    ename varchar2(10) constraint emp02_ename_NN not null, -- not null은 컬럼 옆에만 들어간다
    job varchar2(10) not null,
    deptno number(2),
    
    --제약의 정의
    constraint emp02_empno_PK primary key(empno),
    constraint emp02_ename_UK unique(ename),
    constraint emp02_deptno_FK foreign key(deptno) REFERENCES dept(deptno)
);


--전화번호 관리 프로그램

--이름, 전화번호, 생일, 이메일
--전공, 학년
--부서명, 직급
--동호회이름, 닉네임
--대리키 : 일련번호 -> member_idx, pIdx

--전화번호부(Contact)

create table contact(
    pIdx number(6),
    category varchar2(10) not null,
    name varchar2(20) not null,
    phone_num number(20) not null,
    address varchar2(20) default 'SEOUL' not null,
    email varchar2(20) default '@naver.com' not null,
    
    major varchar2(10),
    grade number(2),
    company varchar2(10),
    dept varchar2(10),
    job varchar2(10),
    cafename varchar2(10),
    nickname varchar2(10),
    
    constraint contact_pIdx_PK primary key(pIdx),
    constraint contact_category_CK check (category in ('UNIV','COM','CAFE')),
    constraint contact_phone_num_UK unique(phone_num)
);

select * from contact;

drop table phoneInfo_basic;
drop table phoneInfo_univ;
drop table phoneInfo_com;

create table phoneInfo_basic (
    idx number(6),
    fr_name varchar2(20) not null,
    fr_phonenumber varchar2(20) not null,
    fr_email varchar2(20),
    fr_address VARCHAR2(20),
    fr_regdate date default sysdate,    
    constraint phoneInfo_basic_idx_PK primary key(idx),
    unique(fr_phonenumber)
);


create table phoneInfo_univ (
    idx number(6),
    fr_u_major varchar2(20) default 'N' not null,
    fr_u_year number(1) default 1 not null,
    fr_ref number(6),
    constraint phoneInfo_univ_idx_PK primary key(idx),
    constraint phoneInfo_univ_fr_u_year_CK check (fr_u_year>0 and fr_u_year<5),
    constraint phoneInfo_univ_fr_ref_FK foreign key(fr_ref) REFERENCES phoneInfo_basic(idx)    
);

create table phoneInfo_com(
    idx number(6),
    fr_c_company varchar2(20) default 'N' not null,
    fr_ref number(6),
    constraint phoneInfo_com_idx_PK primary key(idx),
    constraint phoneInfo_com_fr_ref_FK foreign key(fr_ref) REFERENCES phoneInfo_basic(idx)  
);

